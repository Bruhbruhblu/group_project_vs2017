/*
	 commend:
*/
#include <iostream>
#include <string>
#include <vector>
#include <ctime>

#include <iomanip>
using namespace std;


class Date {
public:
	Date() {}
	Date(string dd_mm_yyyy) {
		string::iterator itr = dd_mm_yyyy.begin();
		Day = (((int)*itr) - 48) * 10 + ((int)(*(++itr) - 48));
		itr += 2;
		Month = (((int)*itr) - 48) * 10 + ((int)(*(++itr)) - 48);
		itr += 2;
		Year = (((int)*itr) - 48) * 1000 + ((int)(*(++itr)) - 48) * 100 + ((int)(*(++itr)) - 48) * 10 + ((int)(*(++itr)) - 48);

		find_lastday();
	}                   //convert str to year
	Date(const Date& rhs) {
		Year = rhs.Year;
		Month = rhs.Month;
		Day = rhs.Day;
		last_day = rhs.last_day;
	}
	Date(int year, int month, int day) :Year(year), Month(month), Day(day) {
		find_lastday();
	}
	bool operator ==(const Date &rhs) {
		if (Day != rhs.Day)return 0;
		else if (Month != rhs.Month) return 0;
		else if (Year != rhs.Year) return 0;

		return 1;
	}
	friend ostream& operator<<(ostream &a, const Date &th)
	{
		if(th.Month<10)
			a<<'0'<<th.Month;
		else a<<th.Month;
		a<<'/';
		if( th.Day < 10)
			a <<'0'<<th.Day;
		else 
			a<<th.Day;
		
		return  a;
	}
	void print_date(){
		cout<< Day << '-' << Month << '-' << Year;
	}
	

	void setdate(int year, int month, int day) {
		Year = year;
		Month = month;
		Day = day;
		find_lastday();
	}

	Date nextday() {
		int d = Day + 1;
		int m = Month;
		int y = Year;
		if (d > last_day) {
			d = 1;
			m += 1;
			if (m > 12){
				m = 1;
				y++;
			}
		}
		Date next(y, m, d);
		return next;
	}    //function to find next day


private:
	void find_lastday() {


	}
	int Year;
	int Month;
	int Day;
	int last_day = 30;       // last day of the month
};
class Reserve_Data {
public:
	Reserve_Data() {}
	Reserve_Data(string person, string address, int phone_no, char room, unsigned int no_Participants,
		Date Booked_date, int Start_time, int End_time) {
		SetData(person, address, phone_no, room, no_Participants, Booked_date, Start_time, End_time);
		Cal_Cost();
	}
	explicit Reserve_Data(const Reserve_Data& rhs) {
		SetData(rhs.R_person, rhs.R_address, rhs.R_phone_no, rhs.R_room, rhs.R_no_Participants, rhs.R_date, rhs.R_Start_time, rhs.R_End_time);
	}
	~Reserve_Data() {

	}
	inline void operator = (const Reserve_Data& rhs) { SetData(rhs.R_person,rhs.R_address,rhs.R_phone_no,rhs.R_room, rhs.R_no_Participants, rhs.R_date, rhs.R_Start_time, rhs.R_End_time); }

	void SetData(string person, string address, int phone_no, char room, unsigned int no_Participants,
		Date Booked_date, int Start_time, int End_time)
	{
		R_person = person;
		R_address = address;
		R_phone_no = phone_no;
		R_room = room;
		R_date = Booked_date;
		R_Start_time = Start_time;
		R_End_time = End_time;
		R_no_Participants = no_Participants;
	}


	void viewData() {






	} //print the Data as R1.7.
	int get_start_time(){return R_Start_time;}
	int get_End_time(){return R_End_time;}
	
	
	void alterPerson(string name){R_person = name;}
	void alterAddress(string address){R_address = address;}
	void alterphoneNo(int num){R_phone_no = num;}
	void alterDate(Date newdate) { R_date = newdate; }
	void alterRoom(char newRoom) {
		R_room = newRoom;
		Cal_Cost();
	}
	void alterno_Participants(int new_no) { R_no_Participants = new_no; }
	void alterStart_time(int New_startTime) { R_Start_time = New_startTime; }
	void alterEnd_time(int New_EndTime) { R_End_time = New_EndTime; }
	void alterDuration(int start, int End) { R_Start_time = start; R_End_time = End; Cal_Cost(); }

	int getcost() { return R_Cost; } // using this function to get cost


private:
	string R_person;
	string R_address;
	int R_phone_no;
	char R_room;                    //reserved room
	unsigned int R_no_Participants;
	Date R_date;
	int R_Start_time;
	int R_End_time;
	int R_Cost;

	void Cal_Cost() {
		int cost;





		R_Cost = cost;
	}                               //function to calculate cost
};



inline void print_time(int hours,int mins=0){
	if(hours<10)cout<<'0'<<hours;
	else cout<<hours;
	cout<<':';
	if(mins=0)cout<<"00";
	else if(mins<10)cout<<'0'<<mins;
	else cout<<mins;
}
class BookingSystem {
public:
	BookingSystem() {
		BookingSystem() {
		time_t t = time(0);
		localtime_s(&now, &t);
		Date temp;
		date = new Date[8];
		date[0] = Date(now.tm_year + 1900, now.tm_mon + 1, now.tm_mday);
		for (int i = 1; i < 8; i++)
			date[i] = date[i - 1].nextday();
		for (int i = 0; i < 3; i++)
			for (int j = 0; j < 7; j++)
				for (int k = 0; k < 13; k++)
					timetable[i][j][k] = 0;
	}
	}
	~BookingSystem() {
		delete[] date;
	}

	void mainmethod() {
		while (true) {
			menu();     //print , get input ,  and call the right function
			Date a("11_10_2011");                                                           //debug message
			for (int i = 0; i < 10; i++) a = a.nextday();
			cout << a << endl;
			cout << "today is :" << date[0] << "   tommorow is :" << date[1] << endl;
		}
	}
protected:
	void menu() {
		int x;

		// print menu



		cin >> x;
		switch (x) {
		case 1:
			Reservation_menu();
			break;                                          //continue.........

		}
	}
	void Reservation_menu(){}
	void Reservation() {
		//get data (cin>>)
		Reserve_Data data;                //use data.set(xxx) to set data
		int Start = 0;     // Start.hours=?  Start.mins =?
		int End = 0;
		int id = reserve_datas.size();    //id aotumate generated



		//check vaild
		if (1)                      // if no Room available
		{
			int suggest = get_suggest(End - Start, Start);
			cout << "***Reservation *** \n"
				<< "Sorry, no room is available at the time slot.\n"
				<< "Suggestions:" << endl;
		}

		//confirm
		if (data.confirm()){
			reserve_datas.push_back(data);          //finish reservation
			for(int i = Start-9; i<End-9 ;i++){
				
			} //scheduling
		}
	}                               //R1.3
	void  Modify_Reservation() {

	}    //R.11

	void  Cancel_Reservation() {


	}

	void print_record(char c){
		cout << "\nRoom " << c << "\n\n";
		int x;
		if (c == 'A')x = 0;
		else if (c == 'B')x = 1;
		else x = 2;
		cout << setw(6) << left << ' ';
		int i;
		for (i = 1; i <= 7; i++) {
			cout << date[i] << "  ";
		}
		cout << endl;

		for (i = 0; i < 13; i++) {
			print_time(i + 9);
			cout << "  ";
			for (int j = 0; j < 7; j++)
			{
				if (timetable[x][j][i] > 0)
					cout << "  x    ";
				else cout << "      ";
			}
			cout << endl;
		}

	}

	void Show_Reservation_Record() {
		cout << "*** Reservation Record ***\n" <<
			"Display Which Room (A - C):" << endl;
		char c =' ';
		while (1) {
			cin >> c;
			if (c == 'A')print_record('A');
			else if (c == 'B')print_record('B');
			else if (c == 'C')print_record('C');
			else if (c == 'x' || c == 'X')break;
			else cout << "invalid input" << endl;
			cout <<"Option(A - C), X to exit :";
		}
	
	}//R.2
	
	void Show_Staff_Requirements() {

	}

private:

	inline bool Confirm_Change(const Reserve_Data &date) {

		return 1;
	}
	inline bool date_is_vaild(Date date) {

		return 1;
	}
	inline bool time_is_vaild(int time) {

		return 1;
	}


	inline int get_suggestion(int duration, int conf_time_Start) {
		int suggestion;


		return suggestion;
	}                       //find the nearest avalible time form conflict time.  R1.5



	vector<Reserve_Data> reserve_datas;  //dynamic array vector
	int timetable[3][7][13];           //[Room]:[Day]:[time] : number of people 
	Date* date;                        //jest read it as (Date date[8];) today to next7 day
	tm now;                            //time now
};

int main() {
	BookingSystem bs;
	bs.mainmethod();                     //dont insert code here
	return 0;
}
